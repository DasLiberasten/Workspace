P03 - Калькулятор
Входная строка выражения считывается посимвольно и записывается в список в виде обратной польской записи с помощью
рекурсивного спуска
Разрешены операции *,/,+,-,(,)
Разрешены символы 0..9,'.', a..z, A..Z
Разрешены переменные, состоящие из заглавных и строчных букв латинского алфавита. Длина переменной не более 6 символов
Разрешены отрицательные числа, однако операция унарного минуса отсутствует
При делении на ноль, ноль заменяется единицей
При некорректном вводе значений переменных, переменной передается значение 0

typedef enum SizeUnion {Здесь хранится информация о том, что хранится в PolizBlock
При неправельном вводе, выводит ошибку
При правильном выполняет вычисления, если в выражении содержатся переменные, требует ввод их значения с клавиатуры
Далее пользователю предлагается заново узнать значение выражения с новыми значениями переменных(при вводе 1), 
либо программа завершается(при вводе 2)
OPERATION = 0,
NUMBER = 1,
VARIABLE = 2
} SizeUnion;

typedef struct VarInfo { Здесь хранятся два указателя на соответствующие поля структуры Database
char *Name;
double *Value;
} VarInfo;

typedef union PolizBlock { Здесь хранится либо число, либо операция, либо информация о переменной.
VarInfo Variable;
double Num;
char Operation;
} PolizBlock;

typedef struct List {Список хранящий ОПЗ
SizeUnion Sz; Данные о том, что хранится в объединении
PolizBlock Data; Блок данных
struct List *Next;
struct List *Prev;
} List;

typedef struct Database {База данных о каждой переменной
double Num;
char Name[7];
struct Database *Child;
struct Database *Parent;
} Database;

typedef struct Stack {Стек, построенный на списке, для вычисления значения выражения
double Value;
struct Stack *Next;
} Stack;

int Input, Переменная для посимвольного считывания
Error, - код ошибки
Counter; - Счетчик для обработки отрицательных чисел
Database *Db = NULL;
List *Poliz;

void FinalCheck(); Полный анализ входной строки на предмет ошибок и заполнение списка Poliz. Если ошибки в входной строке
будет создан некорректно и в дальнейшем будет выведена ошибка

Части рекурсивного спуска
void Expression();
void Term();
void Multiplier(char z);
void Number(char z);

Процедуры добавления и удаления данных из стека. Обе процедуры взаимодействуют с памятью(либо удаляют, либо выделяют)
void PushStack(Stack **head, double value);
double PopStack(Stack **head);

Перемещение указателя на начало списка
Database *BackDb(Database *gr);
List BackList (List *gr);

Database *InEdge(Database *gr, const char _name[6]); Проверка наличия переменной по имени в базе данных

Инициализация элементов списка
Database *CreateRandomEdge();
List *CreateRandomList();

Добавление 1 элемента в список
void AddVariable();
void AddElem();

Удаление списков
void DeleteAllPoints(Database **gr);
void DeleteAllList(List **gr);

double InputDouble(); Считывание чисел формата Double

void ErrorCheck(); Проверка на ошибки
Error == 1: "Missing operator"
Error == 2: "Missing operand"
Error == 3: "Unexpected character"
Error == 4: "Banned binary operation"
Error == 5: "Missing ')'"
Error == 6: "Missing '('" 
Error == 7: "Sudden EOl or EOF"

double Calculate();Вычисление значения выражения, если введены значения переменных
void Full() - Полное вычисление значения переменной, с вводом новых значений переменных;

Инструкция по мейкфайлу (Для всех трех папок)
make clear_reg - удаляет .o файлы и main 
make clear_code - удаляет .gcda и .gcno файлы 
Название итогового исполняемого файля - main
Вариант 1
Мейкфайл после сборки исполняемого файла запускает его, после выполнения не удаляет
В данном варианте пользователь самостоятельно вводит с клавиатуры все запрашиваемые строки (выражение, значения переменных)
Вариант 2
Мейкфайл после сборки исполняемого файла выводит содержимое файла ErrFile в консоль и запускает с тестовыми строками, выведенными выше, после выполнения не удаляет
В данном варианте сгенерирован тест, в котором рассмотрены все виды возможных ошибок ввода
make run - запускает заново тест из файла ErrFile
Вариант 3
Мейкфайл после сборки исполняемого файла выводит содержимое файлов Test1,Test2,Test3 в консоль и запускает с тестовыми строками, выведенными выше, после выполнения не удаляет. Имена файлов содержатся в файле files,
который поступает скрипту на вход
В данном варианте сгенерированы тесты, в каждом из которых введены строки, которые пользователь использует для заполнения значений переменных, и решений, продолжать работу или нет 
Например

Enter start line
q*2+t*3-4

Enter value of q variable
12

Enter value of t variable
3

Result: 29.000000
1:Repeat with new values
Not 1:Exit
1

Enter value of q variable
34

Enter value of t variable
5

Result: 79.000000
1:Repeat with new values
Not 1:Exit
2

Будет выглядеть как
q*2+t*3-4
12
3
1
34
5
2

make run - запускает заново все три теста