Шелл
Реализованы команды ; || && 
Реализованы команды перенаправления и конвейер
Реализован фоновый режим (но только в конце строки)
Реализованы (), но в них нет cd и фонового режима
Реализована команда cd (Работает с || && ;, но в конвейер пихать не надо... И в скобки)

typedef enum MTcommand { - режим, от которого зависит, как будет запущена (или нет) следующая команда
    AND = 0, &&
    OR = 1, ||
    WAIT = 2, ;
    OPERATION = 3 default (для одной команды)
} MTcommand;

typedef enum OutFormat { Каков формат вывода
    APPEND = 0, >>
    WRITE = 1 >
} OutFormat;

typedef struct OutputFile {
    OutFormat Status; Каков формат вывода
    char *Name; Имя файла вывода
} OutputFile;

Главные токены - Полноценные команды, для которых разделителями являются || && ; 
Например cat 1 > 2 && sleep 1 | (date > 1 || date > 2) || cat разделится на 5 главных токенов
cat 1 > 2 
&& 
sleep 1 | (date > 1 || date > 2) 
|| 
cat

typedef struct MainTokens {
    MTcommand Factor;режим, от которого зависит, как будет запущена (или нет) следующая команда
    struct SubTokens *Sub; Сабтокены, на которые делится каждый токен
    struct MainTokens *Next; Следующая команда главного токена
    struct MainTokens *Prev; Предыдущая команда главного токена
} MainTokens;
Сабтокены - команды, для которых разделителями являются изначально > >> < | , а в конце только |
Например главный токен cat 1 > 2 | sleep 1 | (date > 1 || date > 2) разделится на 9 сабтокенов
cat 
1 
> 
2 
| 
sleep 
1 
| 
(date > 1 || date > 2)
typedef struct SubTokens { 
    int Status; - является ли токен выражением в скобках (1 - да, 0 - нет)
    char *Token; - Собственно токен
    char **Name; - Итоговая команда, собранная из токенов, для отправки в Execvp
    char *InputFile; - Имя файла для <
    OutputFile *OutputFile; Данные о файле > >>
    struct SubTokens *Next; Следующая команда конвейера
    struct SubTokens *Prev; Предыдущая команда конвейера
} SubTokens;

MainTokens *Poliz = NULL; - структура
int Background = 0; флаг фонового режима

Основные 6 этапов

a = ReadLine() Записывает произвольную строку введенную с клавиатуры по адресу а
Tokenizer(a) Делит строку на главные токены и главные токены на сабтокены
DeleteMain() Обрабатывает главные токены, удаляя токены вида || ; &&, обрабатывая ошибки и проставляя Factor
Finalize() Обрабатывает Сабтокены, оставляя в каждом сабтокене полноценную команду с перенаправлениями, связанную с другими конвейером, а также обрабатывает ошибки. Удаляет > >> < | из сабтокенов
Run() Выполнение команд структуры
DeleteMainAll() - Удаление созданной структуры

Для дочерних процессов в скобках, реализована отдельная программа Stak, которая обрабатывает строку, поступающую ей на argv, но прекращает работу при выполнении одной команды, записанной в строку

Инструкция по мейкфайлу
make clear_reg - удаляет .o файлы и main 
make clear_code - удаляет .gcda и .gcno файлы 
make run_test - запускает прописанные в ErrFile тесты
(Пжлст не удаляйте файлик с именем 1, на нем вся цепочка тестов повязана)
make run - запускает программу в стандартном режиме
Название итогового исполняемого файла - Main.

